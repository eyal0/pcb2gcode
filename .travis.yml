language: cpp
sudo: false

cache:
  directories:
    - ~/.local

matrix:
  include:
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['libgtkmm-2.4-dev', 'moreutils', 'autopoint', 'libc6-dbg']
      env: COMPILER=g++ BOOST=1_60_0 SKIP_GERBERIMPORTER_TESTS=1

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['libgtkmm-2.4-dev', 'moreutils', 'autopoint', 'libc6-dbg']
      env: COMPILER=g++ BOOST=1_66_0

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-8', 'libgtkmm-2.4-dev', 'moreutils', 'autopoint', 'libc6-dbg']
      env: COMPILER=g++-8 BOOST=1_60_0 SKIP_GERBERIMPORTER_TESTS=1

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-8', 'libgtkmm-2.4-dev', 'lcov', 'ggcov', 'autopoint', 'libc6-dbg', 'automake', 'moreutils']
      env: COMPILER=g++-8 BOOST=1_66_0 ENABLE_CODE_COVERAGE="--enable-code-coverage"

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-8', 'libgtkmm-2.4-dev', 'moreutils', 'autopoint', 'libc6-dbg']
      env: COMPILER=g++-8 BOOST=1_66_0

    - os: linux
      compiler: clang
      addons:
        apt:
          packages: ['libgtkmm-2.4-dev', 'moreutils', 'autopoint', 'libc6-dbg']
      env: COMPILER=clang++ BOOST=1_60_0 SKIP_GERBERIMPORTER_TESTS=1

    - os: linux
      compiler: clang
      addons:
        apt:
          packages: ['libgtkmm-2.4-dev', 'moreutils', 'autopoint', 'libc6-dbg']
      env: COMPILER=clang++ BOOST=1_66_0

    - os: osx
      compiler: gcc
      env: COMPILER=g++ BOOST=1_60_0 SKIP_GERBERIMPORTER_TESTS=1

    - os: osx
      compiler: clang
      env: COMPILER=clang++ BOOST=1_60_0 SKIP_GERBERIMPORTER_TESTS=1

install:
  - mkdir -p $HOME/.local/bin
  - mkdir -p $HOME/.local/lib/pkgconfig
  - export PKG_CONFIG_PATH=$HOME/.local/lib/pkgconfig:$PKG_CONFIG_PATH
  - export LD_LIBRARY_PATH=$HOME/.local/lib:$LD_LIBRARY_PATH
  - export PATH=$HOME/.local/bin:$PATH
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      brew update &&
      brew reinstall -s libtool &&
      brew install boost@1.60 &&
      brew install gtkmm &&
      brew install moreutils &&
      brew install gettext &&
      brew install librsvg &&
      brew upgrade wget &&
      hash -r &&
      ln -f -s `which glibtoolize` $HOME/.local/bin/libtoolize &&
      ln -f -s `which glibtool` $HOME/.local/bin/libtool &&
      hash -r &&
      export BOOST_DIR="/usr/local/opt/boost@1.60" &&
      export NUM_CPUS=`sysctl -n hw.logicalcpu` &&
      export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:"/usr/local/opt/libffi/lib/pkgconfig" &&
      export CPPFLAGS_gerbv=-DQUARTZ &&
      export PATH=/usr/local/opt/gettext/bin:$PATH;
    fi
  - >
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      export NUM_CPUS=`nproc --all` &&
      if [ ! -d "~/.local/include/boost" ]; then
        pushd ~ &&
        mkdir -p boost &&
        pushd boost &&
        for i in {1..5}; do
          wget -T20 -t1 -O "boost_${BOOST}.tar.bz2" "https://github.com/pcb2gcode/pcb2gcode/releases/download/v2.0.0/boost_${BOOST}.tar.bz2" && break;
        done &&
        tar xjf "boost_${BOOST}.tar.bz2" &&
        pushd boost_${BOOST} &&
        ./bootstrap.sh --with-libraries=program_options --prefix=${HOME}/.local &&
        chronic ./b2 -j ${NUM_CPUS} &&
        chronic ./b2 install &&
        popd &&
        popd &&
        popd
      fi
    fi
  # Build gerbv
  - >
    if ! gerbv --version; then
      pushd ~
      git clone --depth=1 https://github.com/eyal0/gerbv.git &&
      pushd gerbv &&
      chronic sh autogen.sh &&
      chronic ./configure CPPFLAGS=$CPPFLAGS_gerbv --disable-update-desktop-database --prefix=${HOME}/.local &&
      chronic make -j ${NUM_CPUS} &&
      chronic make install &&
      popd &&
      popd
    fi
  # Done building gerbv
  - >
    if [ "${ENABLE_CODE_COVERAGE}" ]; then
      pip install --user cpp-coveralls colour_runner unittest2 termcolor concurrencytest in_place;
    fi
  - >
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      if ! valgrind --version; then
        pushd ~ &&
        git clone --depth=1 git://sourceware.org/git/valgrind.git &&
        pushd valgrind &&
        chronic sh autogen.sh &&
        chronic ./configure --prefix=${HOME}/.local &&
        chronic make -j ${NUM_CPUS} &&
        chronic make install &&
        popd &&
        popd
      fi
    fi
  # Install parallel.
  - >
    if ! parallel --version; then
      pushd ~ &&
      for i in {1..5}; do
        wget -T5 -t1 -O "parallel-latest.tar.bz2" "https://ftp.gnu.org/gnu/parallel/parallel-latest.tar.bz2" && break;
      done &&
      tar xjf "parallel-latest.tar.bz2" &&
      pushd parallel-* &&
      chronic ./configure --prefix=${HOME}/.local &&
      chronic make &&
      chronic make install &&
      popd &&
      popd
    fi
  - hash -r
  - export CXX="$COMPILER"
  - $CXX --version

script:
  - autoreconf -fvi || travis_terminate 1
  - >
    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      ./configure pcb2gcode_CPPFLAGS_EXTRA=-Werror --disable-dependency-tracking --disable-silent-rules "${ENABLE_CODE_COVERAGE}" --with-boost="$BOOST_DIR";
    fi || travis_terminate 1
  - >
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      ./configure pcb2gcode_CPPFLAGS_EXTRA=-Werror --disable-dependency-tracking --disable-silent-rules --with-boost="${HOME}/.local" --enable-static-boost "${ENABLE_CODE_COVERAGE}";
    fi || travis_terminate 1
  - make -j ${NUM_CPUS} || travis_terminate 1
  - pushd testing/gerbv_example/ || travis_terminate 1
  - >
    if [[ ! "${ENABLE_CODE_COVERAGE}" ]]; then  # We don't want to count this in coverage because there are no tests.
      ls | parallel -k -j ${NUM_CPUS} --halt soon,fail=1 '
        pushd {};
        echo "Running on {}";
        if [[ -f "no-valgrind" ]]; then
          cat no-valgrind;
        fi;
        if [[ -f "no-valgrind" || "$TRAVIS_OS_NAME" != "linux" ]]; then
          time chronic ../../../pcb2gcode || exit;
        else
          time chronic valgrind --error-exitcode=127 --errors-for-leak-kinds=definite --leak-check=full -- ../../../pcb2gcode || exit;
        fi;
        popd';
    fi || travis_terminate 1
  - popd || travis_terminate 1
  - lcov --directory . -z || true #Ignore errors
  - VERBOSE=1 SKIP_GERBERIMPORTER_TESTS_PNG=1 make -j ${NUM_CPUS} check-valgrind || travis_terminate 1
  - if [ "${ENABLE_CODE_COVERAGE}" ]; then ./integration_tests.py; fi || travis_terminate 1

after_success:
  - >
    if [ "${ENABLE_CODE_COVERAGE}" ]; then
      coveralls --verbose --gcov gcov-8 --gcov-options '\-lpr' -E ".*_tests.cpp";
    fi
